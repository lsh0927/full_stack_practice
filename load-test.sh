#!/bin/bash

# ==============================================
# Í∏∞Îä•Î≥Ñ Î∂ÄÌïò ÌÖåÏä§Ìä∏ Ïä§ÌÅ¨Î¶ΩÌä∏ v2.0
# ÏÇ¨Ïö©Î≤ï: ./load-test.sh [Í∏∞Îä•] [ÏöîÏ≤≠Ïàò] [ÎèôÏãúÏÑ±]
# Ïòà: ./load-test.sh posts 100 10
# ==============================================

FEATURE=${1:-all}
REQUESTS=${2:-100}
CONCURRENT=${3:-10}
BASE_URL="http://localhost:3000"

# ÏÉâÏÉÅ Ï†ïÏùò
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# ÌÜµÍ≥Ñ Î≥ÄÏàò
SUCCESS_COUNT=0
ERROR_COUNT=0
declare -A ERROR_TYPES

echo "======================================"
echo "üöÄ Í∏∞Îä•Î≥Ñ Î∂ÄÌïò ÌÖåÏä§Ìä∏ v2.0"
echo "======================================"
echo "ÌÖåÏä§Ìä∏ Í∏∞Îä•: $FEATURE"
echo "Ï¥ù ÏöîÏ≤≠ Ïàò: $REQUESTS"
echo "ÎèôÏãú ÏöîÏ≤≠ Ïàò: $CONCURRENT"
echo "ÎåÄÏÉÅ ÏÑúÎ≤Ñ: $BASE_URL"
echo "======================================"
echo ""

# ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
echo -e "${BLUE}[Ï§ÄÎπÑ] Ïù∏Ï¶ù ÌÜ†ÌÅ∞ Î∞úÍ∏â Ï§ë...${NC}"

TOKEN_RESPONSE=$(echo '{"email":"test@example.com","password":"test1234"}' | \
  curl -s -X POST $BASE_URL/auth/login -H "Content-Type: application/json" -d @-)

# Î°úÍ∑∏Ïù∏ Ïã§Ìå® Ïãú ÌöåÏõêÍ∞ÄÏûÖ
if echo "$TOKEN_RESPONSE" | grep -q "error\|Unauthorized\|Cannot"; then
  echo -e "${YELLOW}ÌÖåÏä§Ìä∏ Í≥ÑÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§. ÌöåÏõêÍ∞ÄÏûÖ Ï§ë...${NC}"

  SIGNUP_RESPONSE=$(echo '{"email":"test@example.com","password":"test1234","username":"loadtest","nickname":"Î∂ÄÌïòÌÖåÏä§Ìä∏"}' | \
    curl -s -X POST $BASE_URL/auth/signup -H "Content-Type: application/json" -d @-)

  if echo "$SIGNUP_RESPONSE" | grep -q "error"; then
    echo -e "${RED}‚ùå ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®:${NC}"
    echo "$SIGNUP_RESPONSE"
    exit 1
  fi

  echo -e "${GREEN}‚úì ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ${NC}"

  # Ïû¨Î°úÍ∑∏Ïù∏
  TOKEN_RESPONSE=$(echo '{"email":"test@example.com","password":"test1234"}' | \
    curl -s -X POST $BASE_URL/auth/login -H "Content-Type: application/json" -d @-)
fi

# ÌÜ†ÌÅ∞ Ï∂îÏ∂ú (access_token ÌïÑÎìúÎ™Ö ÏÇ¨Ïö©)
TOKEN=$(echo "$TOKEN_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$TOKEN" ]; then
  echo -e "${RED}‚ùå ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®:${NC}"
  echo "$TOKEN_RESPONSE"
  exit 1
fi

echo -e "${GREEN}‚úì Ïù∏Ï¶ù ÌÜ†ÌÅ∞ Î∞úÍ∏â ÏôÑÎ£å${NC}"
echo ""

# Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå ÌÖåÏä§Ìä∏
test_posts_list() {
  echo -e "${BLUE}[1/6] Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå Î∂ÄÌïò ÌÖåÏä§Ìä∏${NC}"

  # ÏûÑÏãú ÌååÏùºÎ°ú Í≤∞Í≥º ÏàòÏßë
  TEMP_FILE=$(mktemp)

  for i in $(seq 1 $CONCURRENT); do
    (
      for j in $(seq 1 $((REQUESTS / CONCURRENT))); do
        PAGE=$((RANDOM % 10 + 1))
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          "$BASE_URL/posts?page=$PAGE&limit=10" \
          -H "Authorization: Bearer $TOKEN")
        echo "$HTTP_CODE" >> "$TEMP_FILE"
        echo -n "."
      done
    ) &
  done
  wait

  # Í≤∞Í≥º ÏßëÍ≥Ñ
  while read code; do
    if [ "$code" = "200" ] || [ "$code" = "201" ]; then
      ((SUCCESS_COUNT++))
    else
      ((ERROR_COUNT++))
      ERROR_TYPES[$code]=$((${ERROR_TYPES[$code]:-0} + 1))
    fi
  done < "$TEMP_FILE"
  rm -f "$TEMP_FILE"

  echo -e "\n${GREEN}‚úì ÏôÑÎ£å${NC}\n"
}

# Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå ÌÖåÏä§Ìä∏
test_posts_detail() {
  echo -e "${BLUE}[2/6] Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå Î∂ÄÌïò ÌÖåÏä§Ìä∏${NC}"

  # Í≤åÏãúÍ∏Ä ID Ï∂îÏ∂ú (posts Î∞∞Ïó¥ÏóêÏÑúÎßå, author.id Ï†úÏô∏) - JWT ÌÜ†ÌÅ∞ ÌïÑÏöî
  POST_RESPONSE=$(curl -s "$BASE_URL/posts?page=1&limit=10" -H "Authorization: Bearer $TOKEN")

  # PythonÏúºÎ°ú Ï†ïÌôïÌûà Í≤åÏãúÍ∏Ä IDÎßå Ï∂îÏ∂ú
  POST_IDS=$(echo "$POST_RESPONSE" | python3 -c "import sys,json; d=json.load(sys.stdin); print('\n'.join([p['id'] for p in d.get('posts', [])]))" 2>/dev/null)
  POST_ARRAY=($POST_IDS)
  TOTAL_POSTS=${#POST_ARRAY[@]}

  if [ $TOTAL_POSTS -eq 0 ]; then
    echo -e "${YELLOW}‚ö† Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§. ÌÖåÏä§Ìä∏ Í≤åÏãúÍ∏ÄÏùÑ ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.${NC}\n"
    return
  fi

  EXISTING_POST="${POST_ARRAY[0]}"
  TEMP_FILE=$(mktemp)

  for i in $(seq 1 $CONCURRENT); do
    (
      for j in $(seq 1 $((REQUESTS / CONCURRENT))); do
        # ÎûúÎç§ÌïòÍ≤å Ïã§Ï†ú Í≤åÏãúÍ∏Ä Ï°∞Ìöå (Î∞∞Ïó¥ÏóêÏÑú ÏÑ†ÌÉù)
        RAND_INDEX=$((RANDOM % TOTAL_POSTS))
        RAND_POST="${POST_ARRAY[$RAND_INDEX]}"
        if [ -z "$RAND_POST" ]; then
          RAND_POST="$EXISTING_POST"
        fi
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          "$BASE_URL/posts/$RAND_POST" \
          -H "Authorization: Bearer $TOKEN")
        echo "$HTTP_CODE" >> "$TEMP_FILE"
        echo -n "."
      done
    ) &
  done
  wait

  while read code; do
    if [ "$code" = "200" ] || [ "$code" = "201" ]; then
      ((SUCCESS_COUNT++))
    else
      ((ERROR_COUNT++))
      ERROR_TYPES[$code]=$((${ERROR_TYPES[$code]:-0} + 1))
    fi
  done < "$TEMP_FILE"
  rm -f "$TEMP_FILE"

  echo -e "\n${GREEN}‚úì ÏôÑÎ£å${NC}\n"
}

# ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå ÌÖåÏä§Ìä∏
test_users_profile() {
  echo -e "${BLUE}[3/6] ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå Î∂ÄÌïò ÌÖåÏä§Ìä∏${NC}"

  # Ïã§Ï†ú ÏÇ¨Ïö©Ïûê UUID Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (authorId ÌïÑÎìú ÏÇ¨Ïö©) - JWT ÌÜ†ÌÅ∞ ÌïÑÏöî
  USER_LIST_RESPONSE=$(curl -s "$BASE_URL/posts?page=1&limit=20" -H "Authorization: Bearer $TOKEN")
  USER_IDS=$(echo "$USER_LIST_RESPONSE" | grep -o '"authorId":"[^"]*"' | cut -d'"' -f4 | sort -u)

  if [ -z "$USER_IDS" ]; then
    echo -e "${YELLOW}‚ö† ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Ïä§ÌÇµ${NC}\n"
    return
  fi

  # Î∞∞Ïó¥Î°ú Î≥ÄÌôò
  USER_ARRAY=($USER_IDS)
  TOTAL_USERS=${#USER_ARRAY[@]}

  if [ $TOTAL_USERS -eq 0 ]; then
    echo -e "${YELLOW}‚ö† ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Ïä§ÌÇµ${NC}\n"
    return
  fi

  TEMP_FILE=$(mktemp)

  for i in $(seq 1 $CONCURRENT); do
    (
      for j in $(seq 1 $((REQUESTS / CONCURRENT))); do
        # ÎûúÎç§ÌïòÍ≤å ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù
        RAND_INDEX=$((RANDOM % TOTAL_USERS))
        USER_ID="${USER_ARRAY[$RAND_INDEX]}"
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          "$BASE_URL/users/$USER_ID" \
          -H "Authorization: Bearer $TOKEN")
        echo "$HTTP_CODE" >> "$TEMP_FILE"
        echo -n "."
      done
    ) &
  done
  wait

  while read code; do
    if [ "$code" = "200" ] || [ "$code" = "201" ]; then
      ((SUCCESS_COUNT++))
    else
      ((ERROR_COUNT++))
      ERROR_TYPES[$code]=$((${ERROR_TYPES[$code]:-0} + 1))
    fi
  done < "$TEMP_FILE"
  rm -f "$TEMP_FILE"

  echo -e "\n${GREEN}‚úì ÏôÑÎ£å${NC}\n"
}

# ÎåìÍ∏Ä Ï°∞Ìöå ÌÖåÏä§Ìä∏
test_comments() {
  echo -e "${BLUE}[4/6] ÎåìÍ∏Ä Ï°∞Ìöå Î∂ÄÌïò ÌÖåÏä§Ìä∏${NC}"

  POST_RESPONSE=$(curl -s "$BASE_URL/posts?page=1&limit=5" -H "Authorization: Bearer $TOKEN")
  EXISTING_POST=$(echo "$POST_RESPONSE" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

  if [ -z "$EXISTING_POST" ]; then
    echo -e "${YELLOW}‚ö† Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§. Ïä§ÌÇµ${NC}\n"
    return
  fi

  TEMP_FILE=$(mktemp)

  for i in $(seq 1 $CONCURRENT); do
    (
      for j in $(seq 1 $((REQUESTS / CONCURRENT))); do
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          "$BASE_URL/posts/$EXISTING_POST/comments" \
          -H "Authorization: Bearer $TOKEN")
        echo "$HTTP_CODE" >> "$TEMP_FILE"
        echo -n "."
      done
    ) &
  done
  wait

  while read code; do
    if [ "$code" = "200" ] || [ "$code" = "201" ]; then
      ((SUCCESS_COUNT++))
    else
      ((ERROR_COUNT++))
      ERROR_TYPES[$code]=$((${ERROR_TYPES[$code]:-0} + 1))
    fi
  done < "$TEMP_FILE"
  rm -f "$TEMP_FILE"

  echo -e "\n${GREEN}‚úì ÏôÑÎ£å${NC}\n"
}

# Ïä§ÌÜ†Î¶¨ Ï°∞Ìöå ÌÖåÏä§Ìä∏
test_stories() {
  echo -e "${BLUE}[5/6] Ïä§ÌÜ†Î¶¨ Ï°∞Ìöå Î∂ÄÌïò ÌÖåÏä§Ìä∏${NC}"

  TEMP_FILE=$(mktemp)

  for i in $(seq 1 $CONCURRENT); do
    (
      for j in $(seq 1 $((REQUESTS / CONCURRENT))); do
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
          "$BASE_URL/stories" \
          -H "Authorization: Bearer $TOKEN")
        echo "$HTTP_CODE" >> "$TEMP_FILE"
        echo -n "."
      done
    ) &
  done
  wait

  while read code; do
    if [ "$code" = "200" ] || [ "$code" = "201" ]; then
      ((SUCCESS_COUNT++))
    else
      ((ERROR_COUNT++))
      ERROR_TYPES[$code]=$((${ERROR_TYPES[$code]:-0} + 1))
    fi
  done < "$TEMP_FILE"
  rm -f "$TEMP_FILE"

  echo -e "\n${GREEN}‚úì ÏôÑÎ£å${NC}\n"
}

# ÌòºÌï© Î∂ÄÌïò ÌÖåÏä§Ìä∏
test_mixed() {
  echo -e "${BLUE}[6/6] ÌòºÌï© Î∂ÄÌïò ÌÖåÏä§Ìä∏ (Ïã§Ï†ú ÏÇ¨Ïö© Ìå®ÌÑ¥)${NC}"

  # Ïã§Ï†ú Í≤åÏãúÍ∏Ä Î∞è ÏÇ¨Ïö©Ïûê UUID Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (PythonÏúºÎ°ú Ï†ïÌôïÌûà Ï∂îÏ∂ú) - JWT ÌÜ†ÌÅ∞ ÌïÑÏöî
  LIST_RESPONSE=$(curl -s "$BASE_URL/posts?page=1&limit=30" -H "Authorization: Bearer $TOKEN")

  # PythonÏúºÎ°ú Í≤åÏãúÍ∏Ä IDÏôÄ ÏûëÏÑ±Ïûê IDÎ•º Ï†ïÌôïÌûà Ï∂îÏ∂ú
  POST_IDS=$(echo "$LIST_RESPONSE" | python3 -c "import sys,json; d=json.load(sys.stdin); print('\n'.join([p['id'] for p in d.get('posts', [])]))" 2>/dev/null)
  USER_IDS=$(echo "$LIST_RESPONSE" | python3 -c "import sys,json; d=json.load(sys.stdin); print('\n'.join(list(set([p['authorId'] for p in d.get('posts', []) if 'authorId' in p]))))" 2>/dev/null)

  POST_ARRAY=($POST_IDS)
  USER_ARRAY=($USER_IDS)
  TOTAL_POSTS=${#POST_ARRAY[@]}
  TOTAL_USERS=${#USER_ARRAY[@]}

  if [ $TOTAL_POSTS -eq 0 ] || [ $TOTAL_USERS -eq 0 ]; then
    echo -e "${YELLOW}‚ö† Îç∞Ïù¥ÌÑ∞Í∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§. Ïä§ÌÇµ${NC}\n"
    return
  fi

  TEMP_FILE=$(mktemp)

  for i in $(seq 1 $CONCURRENT); do
    (
      for j in $(seq 1 $((REQUESTS / CONCURRENT))); do
        RAND=$((RANDOM % 10))
        if [ $RAND -lt 5 ]; then
          # 50%: Í≤åÏãúÍ∏Ä Î™©Î°ù Ï°∞Ìöå
          PAGE=$((RANDOM % 5 + 1))
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$BASE_URL/posts?page=$PAGE&limit=10" \
            -H "Authorization: Bearer $TOKEN")
        elif [ $RAND -lt 8 ]; then
          # 30%: Í≤åÏãúÍ∏Ä ÏÉÅÏÑ∏ Ï°∞Ìöå (Ïã§Ï†ú UUID ÏÇ¨Ïö©)
          RAND_INDEX=$((RANDOM % TOTAL_POSTS))
          POST_ID="${POST_ARRAY[$RAND_INDEX]}"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$BASE_URL/posts/$POST_ID" \
            -H "Authorization: Bearer $TOKEN")
        else
          # 20%: ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°∞Ìöå (Ïã§Ï†ú UUID ÏÇ¨Ïö©)
          RAND_INDEX=$((RANDOM % TOTAL_USERS))
          USER_ID="${USER_ARRAY[$RAND_INDEX]}"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            "$BASE_URL/users/$USER_ID" \
            -H "Authorization: Bearer $TOKEN")
        fi
        echo "$HTTP_CODE" >> "$TEMP_FILE"
        echo -n "."
      done
    ) &
  done
  wait

  while read code; do
    if [ "$code" = "200" ] || [ "$code" = "201" ]; then
      ((SUCCESS_COUNT++))
    else
      ((ERROR_COUNT++))
      ERROR_TYPES[$code]=$((${ERROR_TYPES[$code]:-0} + 1))
    fi
  done < "$TEMP_FILE"
  rm -f "$TEMP_FILE"

  echo -e "\n${GREEN}‚úì ÏôÑÎ£å${NC}\n"
}

# Í∏∞Îä•Î≥Ñ ÌÖåÏä§Ìä∏ Ïã§Ìñâ
case $FEATURE in
  posts)
    test_posts_list
    test_posts_detail
    ;;
  users)
    test_users_profile
    ;;
  comments)
    test_comments
    ;;
  stories)
    test_stories
    ;;
  mixed)
    test_mixed
    ;;
  all)
    test_posts_list
    test_posts_detail
    test_users_profile
    test_comments
    # test_stories  # Ïä§ÌÜ†Î¶¨ ÏóîÎìúÌè¨Ïù∏Ìä∏Í∞Ä ÏïÑÏßÅ Ï§ÄÎπÑÎêòÏßÄ ÏïäÏùå
    test_mixed
    ;;
  *)
    echo -e "${RED}‚ùå Ïïå Ïàò ÏóÜÎäî Í∏∞Îä•: $FEATURE${NC}"
    echo "ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Í∏∞Îä•: posts, users, comments, stories, mixed, all"
    exit 1
    ;;
esac

# Í≤∞Í≥º Ï∂úÎ†•
echo "======================================"
echo -e "${YELLOW}üìä Î∂ÄÌïò ÌÖåÏä§Ìä∏ Í≤∞Í≥º${NC}"
echo "======================================"
echo -e "Ï¥ù ÏöîÏ≤≠: $((SUCCESS_COUNT + ERROR_COUNT))"
echo -e "${GREEN}ÏÑ±Í≥µ: $SUCCESS_COUNT${NC}"
echo -e "${RED}Ïã§Ìå®: $ERROR_COUNT${NC}"

if [ $ERROR_COUNT -gt 0 ]; then
  echo ""
  echo "ÏóêÎü¨ ÏÉÅÏÑ∏:"
  for code in "${!ERROR_TYPES[@]}"; do
    echo "  HTTP $code: ${ERROR_TYPES[$code]}Í∞ú"
  done
fi

TOTAL=$((SUCCESS_COUNT + ERROR_COUNT))
if [ $TOTAL -gt 0 ]; then
  SUCCESS_RATE=$(awk "BEGIN {printf \"%.2f\", ($SUCCESS_COUNT / $TOTAL) * 100}")
  echo ""
  echo -e "ÏÑ±Í≥µÎ•†: ${GREEN}$SUCCESS_RATE%${NC}"
fi

echo ""
echo "======================================"
echo "üìà Î™®ÎãàÌÑ∞ÎßÅ ÌôïÏù∏:"
echo "  - Grafana: http://localhost:3003"
echo "  - Prometheus: http://localhost:9090"
echo ""
echo "üí° Ï∂îÏ≤ú ÎåÄÏãúÎ≥¥Îìú ID:"
echo "  - 14282 (Docker Container)"
echo "  - 1860 (Node Exporter)"
echo "  - 9628 (PostgreSQL)"
echo "  - 11835 (Redis)"
echo "======================================"

